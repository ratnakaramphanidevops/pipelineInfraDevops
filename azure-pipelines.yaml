
trigger: none

variables:
  vmImageName: 'ubuntu-latest'
  terraformVersion: 0.12.3
  azureSubscriptionServiceConnectionName: 'jucoriol'
  tfStateResourceGroupName: 'TestRG'
  tfStateAzureStorageAccountSku: 'RA-GRS'
  tfStateAzureStorageAccountName: 'test'
  tfStateContainerName: 'dev.tfstate'
  

stages:
  - stage: Validate
    displayName: devstage
    jobs:
    # Common Module
    - job: devjob
      displayName: Deploy the Terraform devjob
      pool:
        vmImage: $(vmImageName)
      steps:

      - task: TerraformInstaller@0
        displayName: 'install'
        inputs:
          terraformVersion: '0.13.3'
      - task: TerraformTaskV2@2
        inputs:
          provider: 'azurerm'
          command: 'init'
          workingDirectory: '$(System.DefaultWorkingDirectory)/Terraform'
          backendServiceArm: 'Dev (8f14efb9-d2f2-4ef8-aeb8-afe76bf837bc)'
          backendAzureRmResourceGroupName: 'TestRG'
          backendAzureRmStorageAccountName: 'azuredevopstestsa'
          backendAzureRmContainerName: 'test'
          backendAzureRmKey: 'dev.tfstate'
      - task: TerraformTaskV2@2
        inputs:
          provider: 'azurerm'
          command: 'validate'
          workingDirectory: '$(System.DefaultWorkingDirectory)/Terraform'
      - task: TerraformTaskV2@2
        inputs:
          provider: 'azurerm'
          command: 'plan'
          workingDirectory: '$(System.DefaultWorkingDirectory)/Terraform'
          environmentServiceNameAzureRM: 'Dev (8f14efb9-d2f2-4ef8-aeb8-afe76bf837bc)'
      
      - task: TerraformTaskV2@2
        inputs:
          provider: 'azurerm'
          command: 'apply'
          workingDirectory: '$(System.DefaultWorkingDirectory)/Terraform'
          environmentServiceNameAzureRM: 'Dev (8f14efb9-d2f2-4ef8-aeb8-afe76bf837bc)'